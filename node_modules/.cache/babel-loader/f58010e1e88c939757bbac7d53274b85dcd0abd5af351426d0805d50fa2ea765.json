{"ast":null,"code":"// get logged in user's info \n\nexport const getMe = token => {\n  return fetch('http://localhost:3000/api/user/me', {\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`\n    }\n  });\n};\nexport const createUser = userData => {\n  return fetch(\"http://localhost:3000/api/user\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(userData)\n  });\n};\nexport const loginUser = userData => {\n  return fetch(\"http://localhost:3000/api/user/login\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(userData)\n  });\n};\nexport const createCardio = (cardioData, token) => {\n  return fetch(\"http://localhost:3000/api/exercise/cardio\", {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify(cardioData)\n  });\n};\nexport const createResistance = (resistanceData, token) => {\n  return fetch(\"http://localhost:3000/api/exercise/resistance\", {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify(resistanceData)\n  });\n};\nexport const getCardioById = (cardioId, token) => {\n  return fetch(`http://localhost:3000/api/exercise/cardio/${cardioId}`, {\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`\n    }\n  });\n};\nexport const getResistanceById = (resistanceId, token) => {\n  return fetch(`http://localhost:3000/api/exercise/resistance/${resistanceId}`, {\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`\n    }\n  });\n};\n\n//update\nexport const updateCardio = (cardioId, cardioData, token) => {\n  return fetch(`http://localhost:3000/api/exercise/cardio/${cardioId}`, {\n    method: \"PUT\",\n    // Use the appropriate HTTP method for updating (e.g., PUT or PATCH)\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify(cardioData)\n  });\n};\nexport const updateResistance = (resistanceId, resistanceData, token) => {\n  return fetch(`http://localhost:3000/api/exercise/resistance/${resistanceId}`, {\n    method: \"PUT\",\n    // Use the appropriate HTTP method for updating (e.g., PUT or PATCH)\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify(resistanceData)\n  });\n};\n\n//delete\nexport const deleteCardio = (cardioId, token) => {\n  return fetch(`http://localhost:3000/api/exercise/cardio/${cardioId}`, {\n    method: \"DELETE\",\n    headers: {\n      authorization: `Bearer ${token}`\n    }\n  });\n};\nexport const deleteResistance = (resistanceId, token) => {\n  return fetch(`http://localhost:3000/api/exercise/resistance/${resistanceId}`, {\n    method: \"DELETE\",\n    headers: {\n      authorization: `Bearer ${token}`\n    }\n  });\n};","map":{"version":3,"names":["getMe","token","fetch","headers","authorization","createUser","userData","method","body","JSON","stringify","loginUser","createCardio","cardioData","createResistance","resistanceData","getCardioById","cardioId","getResistanceById","resistanceId","updateCardio","updateResistance","deleteCardio","deleteResistance"],"sources":["/Users/nani/Desktop/presentation/fitness-tracker-MERN-main/project/client/src/utils/API.js"],"sourcesContent":["// get logged in user's info \n\nexport const getMe = (token) => {\n  return fetch('http://localhost:3000/api/user/me', {\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\nexport const createUser = (userData) => {\n  return fetch(\"http://localhost:3000/api/user\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(userData),\n  });\n};\n\nexport const loginUser = (userData) => {\n  return fetch(\"http://localhost:3000/api/user/login\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(userData),\n  });\n};\n\nexport const createCardio = (cardioData, token) => {\n  return fetch(\"http://localhost:3000/api/exercise/cardio\", {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(cardioData)\n  })\n}\n\nexport const createResistance = (resistanceData, token) => {\n  return fetch(\"http://localhost:3000/api/exercise/resistance\", {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(resistanceData)\n  })\n}\n\nexport const getCardioById = (cardioId, token) => {\n  return fetch(`http://localhost:3000/api/exercise/cardio/${cardioId}`, {\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    }\n  })\n}\n\nexport const getResistanceById = (resistanceId, token) => {\n  return fetch(`http://localhost:3000/api/exercise/resistance/${resistanceId}`, {\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    }\n  })\n}\n\n//update\nexport const updateCardio = (cardioId, cardioData, token) => {\n  return fetch(`http://localhost:3000/api/exercise/cardio/${cardioId}`, {\n    method: \"PUT\", // Use the appropriate HTTP method for updating (e.g., PUT or PATCH)\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(cardioData),\n  });\n}\n\nexport const updateResistance = (resistanceId, resistanceData, token) => {\n  return fetch(`http://localhost:3000/api/exercise/resistance/${resistanceId}`, {\n    method: \"PUT\", // Use the appropriate HTTP method for updating (e.g., PUT or PATCH)\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(resistanceData),\n  });\n}\n\n//delete\nexport const deleteCardio = (cardioId, token) => {\n  return fetch(`http://localhost:3000/api/exercise/cardio/${cardioId}`, {\n    method: \"DELETE\",\n    headers: {\n      authorization: `Bearer ${token}`,\n    }\n  })\n}\n\nexport const deleteResistance = (resistanceId, token) => {\n  return fetch(`http://localhost:3000/api/exercise/resistance/${resistanceId}`, {\n    method: \"DELETE\",\n    headers: {\n      authorization: `Bearer ${token}`,\n    }\n  })\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}